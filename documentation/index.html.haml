---
layout: base
---
.row
  .span12
    %h2 MapStruct User Guide

.row
  .span9
    .row
      .span9
        :markdown
          This is the MapStruct reference documentation which covers all functionality provided by MapStruct. In case this guide doesn't answer all your questions just join the MapStruct [Google group](https://groups.google.com/forum/?fromgroups#!forum/mapstruct-users) to get help.

          You found a typo or other error in this guide? Your pull request against this web site's [GitHub repository](http://github.com/mapstruct/mapstruct.org) is more than welcome!

    .row
      .span9
        %h3#section-01 1. Introduction
        :markdown
          MapStruct is a Java [annotation processor](http://docs.oracle.com/javase/6/docs/technotes/guides/apt/index.html) for the generation of type-safe bean mapping classes.

          All you have to do is to define a mapper interface which declares any required mapping methods. During compilation, MapStruct will generate an implementation of this interface. This implementation uses plain Java method invocations for mapping between source and target objects, i.e. no reflection or similar.

          Compared to writing mapping code from hand, MapStruct saves time by generating code which is tedious and error-prone to write. Following a convention over configuration approach, MapStruct uses sensible defaults but steps out of your way when it comes to configuring or implementing special behavior.

          Compared to dynamic mapping frameworks, MapStruct offers the following advantages:

          * Fast execution by using plain method invocations instead of reflection
          * Compile-time type safety: Only objects and attributes mapping to each other can be mapped, no accidental mapping of an order entity into a customer DTO etc.
          * Clear error-reports at build time, if entities or attributes can't be mapped

    .row
      .span9
        %h3#section-02 2. Set up

        :markdown
          MapStruct is a Java annotation processor based on [JSR 269](jcp.org/en/jsr/detail?id=269) and as such can be used within command line builds (javac, Ant, Maven etc.) as well as from within your IDE.

          It comprises two artifacts:

          * _org.mapstruct:mapstruct_: contains the required annotations such as `@Mapping`
          * _org.mapstruct:mapstruct-processor_: contains the annotation processor which generates mapper implementations

          For Maven based projects add the following to your POM file in order to use MapStruct:

        %pre.prettyprint.lang-xml.linenums
          = preserve do
            :escaped
              ...
              <properties>
                  <org.mapstruct.version>0.1.0.Final</org.mapstruct.version>
              </properties>
              ...
              <dependencies>
                  <dependency>
                      <groupId>org.mapstruct</groupId>
                      <artifactId>mapstruct</artifactId>
                      <version>${org.mapstruct.version}</version>
                  </dependency>
              </dependencies>
              ...
              <build>
                  <plugins>
                      <plugin>
                          <groupId>org.bsc.maven</groupId>
                          <artifactId>maven-processor-plugin</artifactId>
                          <version>2.2.3</version>
                          <configuration>
                              <defaultOutputDirectory>
                                  ${project.build.directory}/generated-sources
                              </defaultOutputDirectory>
                              <processors>
                                  <processor>org.mapstruct.ap.MappingProcessor</processor>
                              </processors>
                          </configuration>
                          <executions>
                              <execution>
                                  <id>process</id>
                                  <phase>generate-sources</phase>
                                  <goals>
                                      <goal>process</goal>
                                  </goals>
                              </execution>
                          </executions>
                          <dependencies>
                              <dependency>
                                  <groupId>org.mapstruct</groupId>
                                  <artifactId>mapstruct-processor</artifactId>
                                  <version>${org.mapstruct.version}</version>
                              </dependency>
                          </dependencies>
                      </plugin>
                  </plugins>
              </build>

    .row
      .span9
        %h3#section-03 3. Defining a mapper

        :markdown
          TODO

    .row
      .span9
        %h3#section-04 4. Retrieving a mapper

        :markdown
          Mapper instances can be retrieved via the `org.mapstruct.Mappers` class. Just invoke the `getMapper()` method, passing the interface type of the mapper to return:

        %pre.prettyprint.lang-java.linenums
          = preserve do
            :escaped
              CarMapper mapper = Mappers.getMapper( CarMapper.class );

        :markdown
           By convention, a mapper interface should define a member called `INSTANCE` which holds a single instance of the mapper type:

        %pre.prettyprint.lang-java.linenums
          = preserve do
            :escaped
              @Mapper
              public interface CarMapper {

                  CarMapper INSTANCE = Mappers.getMapper( CarMapper.class );

                  CarDto carToCarDto(Car car);
              }

        :markdown
          This pattern makes it very easy for clients to use mapper objects without repeatedly instantiating new instances:

        %pre.prettyprint.lang-java.linenums
          = preserve do
            :escaped
              Car car = ...;
              CarDto dto = CarMapper.INSTANCE.carToCarDto( car );

        :markdown
          Note that mappers generated by MapStruct are thread-safe and thus can safely be accessed from several threads at the same time.

        .alert.alert-info
          :markdown
            **Tip!** If you are working with a dependency injection solution such as CDI or Spring, you can also set up application/singleton scoped beans for your maper objects, making them injectable into your application code. By default, the generated mapper classes have the same name as their interface, with the suffix _Impl_ appended, e.g. `CarMapperImpl`.

    .row
      .span9
        %h3#section-05 5. Data type conversions
        :markdown
          Not always a mapped attribute has the same type in the source and target objects. For instance an attribute may be of type `int` in the source bean but of type `Long` in the target bean.

          Another example are references to other objects which should be mapped to the corresponding types in the target model. E.g. the class `Car` might have a property `driver` of the type `Person` which needs to be converted into a `PersonDto` object when mapping a `Car` object.

          In this section you'll learn how MapStruct deals with such data type conversions.

        %h4#section05-01 5.1 Implicit type conversions

        :markdown
          MapStruct takes care of type conversions automatically in many cases. If for instance an attribute is of type `int` in the source bean but of type `String` in the target bean, the generated code will transparently perform a conversion by calling `String#valueOf(int)` and `Integer#parseInt(String)`, respectively.

          Currently the following conversions are applied automatically:

          * Between all Java primitive data types and their corresponding wrapper types, e.g. between `int` and `Integer`, `boolean` and `Boolean` etc. The generated code is `null` aware, i.e. when converting a wrapper type into the corresponding primitive type a `null` check will performed.

          * Between all Java primitive number types and the wrapper types, e.g. between `int` and `long` or `byte` and `Integer`.
          <p markdown="1">
              <span class="label label-warning">Warning</span><span>&nbsp;Converting from larger data types to smaller ones (e.g. from `long` to `int`) can cause a value or precision loss. It [is planned](https://github.com/mapstruct/mapstruct/issues/5) to provide an option for raising a warning in such cases in a future MapStruct version.</span>
          </p>

          * Between all Java primitive types (including their wrappers) and `String`, e.g. between `int` and `String` or `Boolean` and `String`.

          * Between `enum` types and `String`.

          More automatic conversions [will be](https://github.com/mapstruct/mapstruct/issues/26) provided soon, e.g. for types such as `Date`, `Calendar` or `BigInteger`.

        %h4#section05-02 5.2 Mapping object references

        :markdown
          Typically an object has not only primitive attributes but also references other objects. E.g. the `Car` class could contain a reference to a `Person` object (representing the car's driver) which should be mapped to a `PersonDto` object referenced by the `CarDto` class.

          In this case just define a mapping method for the referenced object type as well:

        %pre.prettyprint.lang-java.linenums
          = preserve do
            :escaped
              @Mapper
              public interface CarMapper {

                  CarDto carToCarDto(Car car);

                  PersonDto personToPersonDto(Person person);
              }

        :markdown
          The generated code for the `carToCarDto()` method will invoke the `personToPersonDto()` method for mapping the `driver` attribute, while the generated implementation for `personToPersonDto()` performs the mapping of person objects.

          That way it is possible to map arbitrary deep object graphs. Of course you also could convert a referenced object into a string representation or e.g. just refer to its id in the target object:

        %pre.prettyprint.lang-java.linenums
          = preserve do
            :escaped
              @Mapper
              public interface CarMapper {

                  @Mapping(source = "driver", target = "driverId")
                  CarDto carToCarDto(Car car);

                  long personToId(Person person);
              }

        :markdown

          When generating the implementation of a mapping method, MapStruct will apply the following routine for each attribute pair in the source and target object:

          * If source and target attribute have the same type, the value will be simply copied from source to target. If the attribute is a collection (e.g. a `List`) a copy of the collection will be set into the target attribute.
          * If source and target attribute type differ, check whether there is a another mapping method which has the type of the source attribute as parameter type and the type of the target attribute as return type. If such a method exists it will be invoked in the generated mapping implementation.
          * If no such method exists MapStruct will look whether a built-in conversion for the source and target type of the attribute exists. If this is the case, the generated mapping code will apply this conversion.
          * Otherwise an error will be raised at build time, indicating the non-mappable attribute.

        %h4#section05-05 4.3 Invoking other mappers

        :markdown
          In addition to methods defined on the same mapper type MapStruct can also invoke mapping methods defined in other classes, be it mappers generated by MapStruct or hand-written mapping methods. This can be useful to structure your mapping code in several classes (e.g. with on mapper type per application module) or you want to provide custom mapping logic which can't be generated by MapStruct.

          For instance the `Car` class might contain an attribute `manufacturingDate` while the corresponding DTO attribute is of type String. In order to map this attribute, you could implement a mapper class like this:

        %pre.prettyprint.lang-java.linenums
          = preserve do
            :escaped
              public class DateMapper {

                  public String asString(Date date) {
                      return date != null ? new SimpleDateFormat( "yyyy-MM-dd" )
                          .format( date ) : null;
                  }

                  public Date asDate(String date) {
                      try {
                          return date != null ? new SimpleDateFormat( "yyyy-MM-dd" )
                              .parse( date ) : null;
                      }
                      catch ( ParseException e ) {
                          throw new RuntimeException( e );
                      }
                  }
              }

        :markdown
          In the `@Mapper` annotation at the `CarMapper` interface reference the `DateMapper` class like this:

        %pre.prettyprint.lang-java.linenums
          = preserve do
            :escaped
              @Mapper(uses=DateMapper.class)
              public class CarMapperMapper {

                  CarDto carToCarDto(Car car);
              }
        :markdown
          When generating code for the implementation of the `carToCarDto()` method, MapStruct will look for a method which maps a `Date` object into a String, find it on the `DateMapper` class and generate an invocation of `asString()` for mapping the `manufacturingDate` attribute.

          Note that hand-written classes to be used by MapStruct generated mappers must declare a public no-args constructor in order to be instantiable by MapStruct.

    .row
      .span9
        %h3#section-06 6. Mapping collections

        :markdown
          TODO

    .row
      .span9
        %h3#section-07 7. Reverse mappings

        :markdown
          TODO

  .span3
    #toc{ :"data-offset-top"=>"0", :"data-spy"=>"affix" }
      %h5 Contents
      %ol.nav.nav-list
        %li.active
          %a{ :href=>"#section-01" } Introduction
        %li
          %a{ :href=>"#section-02" } Set up
        %li
          %a{ :href=>"#section-03" } Defining a mapper
        %li
          %a{ :href=>"#section-04" } Retrieving a mapper
        %li
          %a{ :href=>"#section-05" } Data type conversions
        %li
          %a{ :href=>"#section-06" } Mapping collections
        %li
          %a{ :href=>"#section-07" } Reverse mappings

    :javascript
      (function(jQuery){
        jQuery( document ).ready( function() {
          $(document.body).scrollspy({
            target: "#toc"
          });
        });
      }(jQuery))
